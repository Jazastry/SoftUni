Database normalization is the process of organizing the attributes and tables of a relational database to minimize data redundancy.
The objectives of normalization:
	
    - to free the collection of relations from undesirable insertion, update and deletion dependencies
    - to reduce the need for restructuring the collection of relations, as new types of data are introduced, and thus increase the life span of application programs
    - to make the relational model more informative to users
    - to make the collection of relations neutral to the query statistics, where these statistics are liable to change as time goes by
Benefits of normalization

Normalization produces smaller tables with smaller rows:
    More rows per page (less logical I/O)
    More rows per I/O (more efficient)
    More rows fit in cache (less physical I/O)
The benefits of normalization include:
    Searching, sorting, and creating indexes is faster, since tables are narrower, and more rows fit on a data page.
    You usually have more tables.
    You can have more clustered indexes (one per table), so you get more flexibility in tuning queries.
    Index searching is often faster, since indexes tend to be narrower and shorter.
    More tables allow better use of segments to control physical placement of data.
    You usually have fewer indexes per table, so data modification commands are faster.
    Fewer null values and less redundant data, making your database more compact.
    Triggers execute more quickly if you are not maintaining redundant data.
    Data modification anomalies are reduced.
    Normalization is conceptually cleaner and easier to maintain and change as your needs change.
